"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * Provides access to the `stream` resource.
 */
class StreamResource {
  /**
   * The path to the `stream` resource.
   */
  static get PATH() {
    return "/v1/calls/{call_uuid}/stream";
  }
  /**
   * Creates a new StreamResource.
   *
   * @param {Credentials} creds - Credentials used when interacting with the Vonage API.
   * @param {Object} options - additional options for the class.
   */


  constructor(creds, options) {
    this.creds = creds;
    this.options = options;
  }
  /**
   * Starts a stream in a call.
   *
   * @param {Object} params - Parameters used when starting the stream. See https://developer.nexmo.com/api/voice#stream for more information.
   * @param {function} callback - function to be called when the request completes.
   */


  start(callId, params, callback) {
    params = JSON.stringify(params);
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: StreamResource.PATH.replace("{call_uuid}", callId),
      method: "PUT",
      body: params,
      headers: {
        "Content-Type": "application/json",
        "Content-Length": Buffer.byteLength(params),
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }
  /**
   * Stop a stream in a call.
   *
   * @param {string} callId - The unique identifier for the call for the stream to be stopped in.
   * @param {function} callback - function to be called when the request completes.
   */


  stop(callId, callback) {
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: StreamResource.PATH.replace("{call_uuid}", callId),
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }

}

var _default = StreamResource;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9TdHJlYW1SZXNvdXJjZS5qcyJdLCJuYW1lcyI6WyJTdHJlYW1SZXNvdXJjZSIsIlBBVEgiLCJjb25zdHJ1Y3RvciIsImNyZWRzIiwib3B0aW9ucyIsInN0YXJ0IiwiY2FsbElkIiwicGFyYW1zIiwiY2FsbGJhY2siLCJKU09OIiwic3RyaW5naWZ5IiwiY29uZmlnIiwiaG9zdCIsImFwaUhvc3QiLCJwYXRoIiwicmVwbGFjZSIsIm1ldGhvZCIsImJvZHkiLCJoZWFkZXJzIiwiQnVmZmVyIiwiYnl0ZUxlbmd0aCIsIkF1dGhvcml6YXRpb24iLCJnZW5lcmF0ZUp3dCIsImh0dHBDbGllbnQiLCJyZXF1ZXN0Iiwic3RvcCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7QUFHQSxNQUFNQSxjQUFOLENBQXFCO0FBQ25COzs7QUFHQSxhQUFXQyxJQUFYLEdBQWtCO0FBQ2hCLFdBQU8sOEJBQVA7QUFDRDtBQUVEOzs7Ozs7OztBQU1BQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBUUMsT0FBUixFQUFpQjtBQUMxQixTQUFLRCxLQUFMLEdBQWFBLEtBQWI7QUFDQSxTQUFLQyxPQUFMLEdBQWVBLE9BQWY7QUFDRDtBQUVEOzs7Ozs7OztBQU1BQyxFQUFBQSxLQUFLLENBQUNDLE1BQUQsRUFBU0MsTUFBVCxFQUFpQkMsUUFBakIsRUFBMkI7QUFDOUJELElBQUFBLE1BQU0sR0FBR0UsSUFBSSxDQUFDQyxTQUFMLENBQWVILE1BQWYsQ0FBVDtBQUVBLFFBQUlJLE1BQU0sR0FBRztBQUNYQyxNQUFBQSxJQUFJLEVBQUUsS0FBS1IsT0FBTCxDQUFhUyxPQUFiLElBQXdCLGVBRG5CO0FBRVhDLE1BQUFBLElBQUksRUFBRWQsY0FBYyxDQUFDQyxJQUFmLENBQW9CYyxPQUFwQixDQUE0QixhQUE1QixFQUEyQ1QsTUFBM0MsQ0FGSztBQUdYVSxNQUFBQSxNQUFNLEVBQUUsS0FIRztBQUlYQyxNQUFBQSxJQUFJLEVBQUVWLE1BSks7QUFLWFcsTUFBQUEsT0FBTyxFQUFFO0FBQ1Asd0JBQWdCLGtCQURUO0FBRVAsMEJBQWtCQyxNQUFNLENBQUNDLFVBQVAsQ0FBa0JiLE1BQWxCLENBRlg7QUFHUGMsUUFBQUEsYUFBYSxtQkFBWSxLQUFLbEIsS0FBTCxDQUFXbUIsV0FBWCxFQUFaO0FBSE47QUFMRSxLQUFiO0FBV0EsU0FBS2xCLE9BQUwsQ0FBYW1CLFVBQWIsQ0FBd0JDLE9BQXhCLENBQWdDYixNQUFoQyxFQUF3Q0gsUUFBeEM7QUFDRDtBQUVEOzs7Ozs7OztBQU1BaUIsRUFBQUEsSUFBSSxDQUFDbkIsTUFBRCxFQUFTRSxRQUFULEVBQW1CO0FBQ3JCLFFBQUlHLE1BQU0sR0FBRztBQUNYQyxNQUFBQSxJQUFJLEVBQUUsS0FBS1IsT0FBTCxDQUFhUyxPQUFiLElBQXdCLGVBRG5CO0FBRVhDLE1BQUFBLElBQUksRUFBRWQsY0FBYyxDQUFDQyxJQUFmLENBQW9CYyxPQUFwQixDQUE0QixhQUE1QixFQUEyQ1QsTUFBM0MsQ0FGSztBQUdYVSxNQUFBQSxNQUFNLEVBQUUsUUFIRztBQUlYRSxNQUFBQSxPQUFPLEVBQUU7QUFDUCx3QkFBZ0Isa0JBRFQ7QUFFUEcsUUFBQUEsYUFBYSxtQkFBWSxLQUFLbEIsS0FBTCxDQUFXbUIsV0FBWCxFQUFaO0FBRk47QUFKRSxLQUFiO0FBU0EsU0FBS2xCLE9BQUwsQ0FBYW1CLFVBQWIsQ0FBd0JDLE9BQXhCLENBQWdDYixNQUFoQyxFQUF3Q0gsUUFBeEM7QUFDRDs7QUEzRGtCOztlQThETlIsYyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBgc3RyZWFtYCByZXNvdXJjZS5cbiAqL1xuY2xhc3MgU3RyZWFtUmVzb3VyY2Uge1xuICAvKipcbiAgICogVGhlIHBhdGggdG8gdGhlIGBzdHJlYW1gIHJlc291cmNlLlxuICAgKi9cbiAgc3RhdGljIGdldCBQQVRIKCkge1xuICAgIHJldHVybiBcIi92MS9jYWxscy97Y2FsbF91dWlkfS9zdHJlYW1cIjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFN0cmVhbVJlc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0NyZWRlbnRpYWxzfSBjcmVkcyAtIENyZWRlbnRpYWxzIHVzZWQgd2hlbiBpbnRlcmFjdGluZyB3aXRoIHRoZSBWb25hZ2UgQVBJLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIGFkZGl0aW9uYWwgb3B0aW9ucyBmb3IgdGhlIGNsYXNzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoY3JlZHMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmNyZWRzID0gY3JlZHM7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgYSBzdHJlYW0gaW4gYSBjYWxsLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gUGFyYW1ldGVycyB1c2VkIHdoZW4gc3RhcnRpbmcgdGhlIHN0cmVhbS4gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm5leG1vLmNvbS9hcGkvdm9pY2Ujc3RyZWFtIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSByZXF1ZXN0IGNvbXBsZXRlcy5cbiAgICovXG4gIHN0YXJ0KGNhbGxJZCwgcGFyYW1zLCBjYWxsYmFjaykge1xuICAgIHBhcmFtcyA9IEpTT04uc3RyaW5naWZ5KHBhcmFtcyk7XG5cbiAgICB2YXIgY29uZmlnID0ge1xuICAgICAgaG9zdDogdGhpcy5vcHRpb25zLmFwaUhvc3QgfHwgXCJhcGkubmV4bW8uY29tXCIsXG4gICAgICBwYXRoOiBTdHJlYW1SZXNvdXJjZS5QQVRILnJlcGxhY2UoXCJ7Y2FsbF91dWlkfVwiLCBjYWxsSWQpLFxuICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgYm9keTogcGFyYW1zLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgXCJDb250ZW50LUxlbmd0aFwiOiBCdWZmZXIuYnl0ZUxlbmd0aChwYXJhbXMpLFxuICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy5jcmVkcy5nZW5lcmF0ZUp3dCgpfWBcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMub3B0aW9ucy5odHRwQ2xpZW50LnJlcXVlc3QoY29uZmlnLCBjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogU3RvcCBhIHN0cmVhbSBpbiBhIGNhbGwuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjYWxsSWQgLSBUaGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBjYWxsIGZvciB0aGUgc3RyZWFtIHRvIGJlIHN0b3BwZWQgaW4uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIHJlcXVlc3QgY29tcGxldGVzLlxuICAgKi9cbiAgc3RvcChjYWxsSWQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGNvbmZpZyA9IHtcbiAgICAgIGhvc3Q6IHRoaXMub3B0aW9ucy5hcGlIb3N0IHx8IFwiYXBpLm5leG1vLmNvbVwiLFxuICAgICAgcGF0aDogU3RyZWFtUmVzb3VyY2UuUEFUSC5yZXBsYWNlKFwie2NhbGxfdXVpZH1cIiwgY2FsbElkKSxcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLmNyZWRzLmdlbmVyYXRlSnd0KCl9YFxuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5vcHRpb25zLmh0dHBDbGllbnQucmVxdWVzdChjb25maWcsIGNhbGxiYWNrKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTdHJlYW1SZXNvdXJjZTtcbiJdfQ==